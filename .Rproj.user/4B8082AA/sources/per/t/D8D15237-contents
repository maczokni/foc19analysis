---
title: "Results with simplified cats"
author: "Reka Solymosi"
date: "03/08/2020"
output:
  word_document: default
  html_document: default
always_allow_html: true
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(haven)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(nnet)
library(stargazer)
library(broom)
library(MASS)
library(dplyr)
library(networkD3)
library(RColorBrewer)
library(janitor)
library(gridExtra)
library(Hmisc)

# read in data
data <- read_dta("https://www.dropbox.com/s/l0k2if9axtpu8mu/Covid-19_Police_Study_Longitudinal_W1-W3.dta?dl=1")
#filter out people who didn't answer foc-19 Q and choose weight to use throughout
data <- data %>% mutate(weight = ifelse(is.na(w1w2weight), 1, w1w2weight))


data <- data %>% 
  mutate(foc19_w3 = case_when(
          # Unworried
          c_foc==2 ~ "Unworried", # not worried
          # Functional
          c_foc==1 & # worried about catching covid in past 3 weeks
          c_focqol < 7   ~ "Functional Worry",  #  quality of life is not reduced by worry
         #Dysfunctional
          c_foc== 1 & # worried about covid
            c_focqol > 6  ~ "Dysfunctional Worry", #quality of life affected by worry
          TRUE ~ NA_character_),    #everyone else 
    foc19_w2 = case_when(
          # Unworried
          b_foc==2 ~ "Unworried", # not worried
          # Functional
          b_foc==1 & # worried about catching covid in past 3 weeks
          b_focqol < 7   ~ "Functional Worry",  #  quality of life is not reduced by worry
         #Dysfunctional
          b_foc== 1 & # worried about covid
            b_focqol > 6  ~ "Dysfunctional Worry", #quality of life affected by worry
          TRUE ~ NA_character_),    #everyone else 
         ) 

data$foc19_w2 <- factor(data$foc19_w2, levels = c("Unworried", "Functional Worry","Dysfunctional Worry" ))
data$foc19_w3 <- factor(data$foc19_w3, levels = c("Unworried", "Functional Worry","Dysfunctional Worry" ))


data <- data %>% 
  mutate(race_coded = as_factor(race), 
         race_coded = case_when(
    grepl("Asian or Asian British", race_coded) |
    grepl("Black or Black British", race_coded) |
    grepl("Mixed", race_coded) ~ "BAME",
    grepl("White", race_coded) ~ "White", 
    TRUE ~ "Other or did not say"), 
    gender = as_factor(gender)) 


```



## Defining and measuring fear of COVID-19

```{r}

foc_tab <- data %>% 
  filter(!is.na(b_foc)) %>% 
  group_by(b_foc) %>% 
  summarise(n = sum(weight, na.rm = T)) %>% 
  mutate(perc = round(n / sum(.$n)*100,0))

freq_tab <- data %>% 
  filter(!is.na(b_focfr)) %>% 
  group_by(b_focfr) %>% 
  summarise(n = sum(weight, na.rm = T)) %>% 
  mutate(perc = round(n / sum(.$n)*100,0)) 

intens_tab <- data %>% 
  filter(!is.na(b_focwo)) %>% 
  group_by(b_focwo) %>% 
  summarise(n = sum(weight, na.rm = T)) %>% 
  mutate(perc = round(n / sum(.$n)*100,0)) 

```

In wave 2 just over one-third (`r foc_tab %>% filter(b_foc == 2) %>% pull(perc)`%) of people said that “No”, they had not worried about getting COVID-19 in the past 3 weeks. From those who said “Yes”, there was variation in self-reported frequency and intensity of worry. `r freq_tab %>% filter(b_focfr == 1) %>% pull(perc)`% of people who were worried experienced this “Once or twice” in the last 3 weeks, while `r freq_tab %>% filter(b_focfr == 8) %>% pull(perc)`% worried more than 10 times in this timeframe. On the last occasion,  `r sum(intens_tab %>% filter(b_focwo == 7) %>% pull(perc),intens_tab %>% filter(b_focwo == 8) %>% pull(perc))`% said they “felt fairly worried” or “very worried”. 


First, individuals were classified as unworried if they reported being unworried about catching COVID-19: it did not matter if they took precautions that made them feel safer, or if their quality of life was reduced by their precautions; if they reported being unworried they were simply classified as unworried.

To be classified in the functional worry group, respondents must have met three conditions: (a) they must have reported being worried about crime; (b) they must have taken precautions that made them feel safer; and (c) they must have judged their quality of life unaffected by either their worries or their precautions. Importantly, we assume that the worry process partly motivates these beneficial precautions; as Tallis & Eysenck (1994) argue, worry can play a problem-solving role in people’s lives by stimulating action and helping them deal with uncertain future events. Finally, to be classified in the dysfunctional worry group, respondents must have reported being worried about COVID-19 but also that their quality of life was reduced by either their worries or their precautions (or both).

```{r}
foc19_tab <- data %>% 
  filter(!is.na(foc19_w2)) %>% 
  group_by(foc19_w2) %>% 
  summarise(w_n = sum(weight, na.rm = T), 
            n = n()) %>% 
  mutate(perc = round(w_n / sum(.$w_n)*100,0)) 

```


To generate the three groups, Tables 1 and 2 break down the sample. Overall `r foc19_tab %>% filter(foc19_w2 == "Unworried") %>%  pull(perc)` % (n = `r foc19_tab %>% filter(foc19_w2 == "Unworried") %>%  pull(n)`, weighted n = `r round(foc19_tab %>% filter(foc19_w2 == "Unworried") %>%  pull(w_n), 0)`) of respondents were unworried. The other two categories – functional worry and dysfunctional worry – are subsets of the remaining `r sum(foc19_tab %>% filter(foc19_w2 != "Unworried") %>%  pull(perc))`% (n = `r sum(foc19_tab %>% filter(foc19_w2 != "Unworried") %>%  pull(n))`, weighted n = `r round(sum(foc19_tab %>% filter(foc19_w2 != "Unworried") %>%  pull(w_n)),0)`). 

```{r}

prec_tab <- data %>% 
  filter(foc19_w2 != "Unworried" & !is.na(b_prec)) %>% 
  mutate(prec_cons = case_when(
    b_prec == 2 ~ "No precs",
     b_prec == 1 & b_precs > 1 ~ "Precs and safer",
    b_prec == 1 & b_precs == 1 ~ "Precs and not safer", 
    TRUE ~ NA_character_
  )) %>% 
  group_by(prec_cons) %>% 
  summarise(w_n = sum(weight, na.rm = T), 
            n = n()) %>% 
  mutate(perc = round(w_n / sum(.$w_n)*100,0)) 

```


Of these `r sum(foc19_tab %>% filter(foc19_w2 != "Unworried") %>%  pull(perc))`%, `r prec_tab %>% filter(prec_cons == "No precs") %>% pull(perc)`% (n = `r prec_tab %>% filter(prec_cons == "No precs") %>%  pull(n)`, weighted n = `r round(prec_tab %>% filter(prec_cons == "No precs") %>%  pull(w_n), 0)`) took no precautions, `r prec_tab %>% filter(prec_cons == "Precs and safer") %>% pull(perc)`% (n = `r prec_tab %>% filter(prec_cons == "Precs and safer") %>%  pull(n)`, weighted n = `r round(prec_tab %>% filter(prec_cons == "Precs and safer") %>%  pull(w_n), 0)`) took precautions and felt safer as a result, and `r prec_tab %>% filter(prec_cons == "Precs and not safer") %>% pull(perc)`% (n = `r prec_tab %>% filter(prec_cons == "Precs and not safer") %>%  pull(n)`, weighted n = `r round(prec_tab %>% filter(prec_cons == "Precs and not safer") %>%  pull(w_n), 0)`) took precautions but did not feel safer as a result (Table 1). We make this distinction because of the central role that beneficial precautionary activity plays in the functional/dysfunctional distinction.

> Table 1 here


```{r}

qol_tab <- data %>% 
  filter(foc19_w2 != "Unworried" & !is.na(b_focqol) & !is.na(b_precqof)) %>% 
  mutate(qol_cat = case_when(b_focqol > 6 & b_precqof > 6 ~ "Affected by both", 
                             b_focqol < 7 & b_precqof < 7 ~ "Not affected by either", 
                             b_focqol > 6 & b_precqof < 7 ~ "Affected by worry but not precs",
                             b_focqol < 7 & b_precqof > 6 ~ "Affected by precs but not worry",
                                   TRUE ~ NA_character_)) %>% 
  group_by(qol_cat) %>% 
  summarise(w_n = sum(weight, na.rm = T), 
            n = n()) %>% 
  mutate(perc = round(w_n / sum(.$w_n)*100,0)) 

```

Table 2 takes the categorisation process one step further by considering also whether the worry or the precautions had an effect on people's quality of life. Overall 
`r qol_tab %>% filter(qol_cat == "Not affected by either") %>% pull(perc)`% (n = `r qol_tab %>% filter(qol_cat == "Not affected by either") %>%  pull(n)`, weighted n = `r round(qol_tab %>% filter(qol_cat == "Not affected by either") %>%  pull(w_n), 0)`)
said their quality of life was not affected by either precautions or worry,
`r qol_tab %>% filter(qol_cat == "Affected by both") %>% pull(perc)`% (n = `r qol_tab %>% filter(qol_cat == "Affected by both") %>%  pull(n)`, weighted n = `r round(qol_tab %>% filter(qol_cat == "Affected by both") %>%  pull(w_n), 0)`)
said they were affected by both,
`r qol_tab %>% filter(qol_cat == "Affected by worry but not precs") %>% pull(perc)`% (n = `r qol_tab %>% filter(qol_cat == "Affected by worry but not precs") %>%  pull(n)`, weighted n = `r round(qol_tab %>% filter(qol_cat == "Affected by worry but not precs") %>%  pull(w_n), 0)`)
said their quality of life was reduced by their worry but not the precautions, and 
`r qol_tab %>% filter(qol_cat == "Affected by precs but not worry") %>% pull(perc)`% (n = `r qol_tab %>% filter(qol_cat == "Affected by precs but not worry") %>%  pull(n)`, weighted n = `r round(qol_tab %>% filter(qol_cat == "Affected by precs but not worry") %>%  pull(w_n), 0)`)
said this was the other way around (precautions but not the worry). 

By cross-tabulating precautionary activity with levels of impact on quality of life, we can identify the functionally worried and the dysfunctionally worried. The cell to highlight is top-left (Table 2). This represents the functionally worried – the subset of the sample who were worried about COVID-19, who took precautions that made them feel safer, and whose quality of life was not reduced by either worry or precaution. The other three cells comprise the dysfunctional worry group.

> Table 2 here

Bringing this classification process to a close, we found that just over one-third (`r foc19_tab %>% filter(foc19_w2 == "Unworried") %>% pull(perc)`% (n = `r foc19_tab %>% filter(foc19_w2 == "Unworried") %>%  pull(n)`, weighted n = `r round(foc19_tab %>% filter(foc19_w2 == "Unworried") %>%  pull(w_n), 0)`)) of the sample were unworried, about one-in-five (`r foc19_tab %>% filter(foc19_w2 == "Functional Worry") %>% pull(perc)`% (n = `r foc19_tab %>% filter(foc19_w2 == "Functional Worry") %>%  pull(n)`, weighted n = `r round(foc19_tab %>% filter(foc19_w2 == "Functional Worry") %>%  pull(w_n), 0)`)) were functionally worried, and just less than a half (`r foc19_tab %>% filter(foc19_w2 == "Dysfunctional Worry") %>% pull(perc)`% (n = `r foc19_tab %>% filter(foc19_w2 == "Dysfunctional Worry") %>%  pull(n)`, weighted n = `r round(foc19_tab %>% filter(foc19_w2 == "Dysfunctional Worry") %>%  pull(w_n), 0)`)) were dysfunctionally worried (Table 3).

## Previous experience

```{r}

data <- data %>% 
  rowwise() %>% 
  mutate(covaff_w2 = sum(b_covidaffect_1, b_covidaffect_2 , b_covidaffect_3,
                         b_covidaffect_4, b_covidaffect_5 , b_covidaffect_6,
                         b_covidaffect_7, b_covidaffect_8 , na.rm = T), 
         age = as_factor(age), 
         cities = as_factor(cities)) %>% 
  filter(gender != "Non-binary", race_coded != "Other or did not say") %>%
  droplevels  

model1 <- multinom(foc19_w2 ~ a_cov + covaff_w2, data=data)
model2 <- multinom(foc19_w2 ~ a_cov + covaff_w2 + age + gender + race_coded + a_covidjob + cities, data=data)

stargazer(model1, model2, type="text", p.auto=FALSE, apply.coef = exp, ci = FALSE)
```
## Negative outcomes on emotional well being

```{r emots}

data <- data %>% 
  mutate(felt_worried = case_when(b_covidemotion_1 != 11 & !is.na(b_covidemotion_1) ~ "Yes", 
                                  b_covidemotion_1 == 11 ~ "No", 
                                  is.na(b_covidemotion_1) ~ NA_character_), 
         felt_anger = case_when(b_covidemotion_2 != 11 & !is.na(b_covidemotion_2) ~ "Yes", 
                                  b_covidemotion_2 == 11 ~ "No", 
                                  is.na(b_covidemotion_2) ~ NA_character_), 
         felt_loneliness = case_when(b_covidemotion_3 != 11 & !is.na(b_covidemotion_3) ~ "Yes", 
                                  b_covidemotion_3 == 11 ~ "No", 
                                  is.na(b_covidemotion_3) ~ NA_character_), 
         not_felt_happiness = case_when(b_covidemotion_4 == 11  ~ "Yes", 
                                  b_covidemotion_4 != 11 & !is.na(b_covidemotion_4) ~ "No", 
                                  is.na(b_covidemotion_3) ~ NA_character_), 
         not_at_all_satisfied_w_life = case_when(b_covidsatisf == 1   ~ "Yes", 
                                  b_covidsatisf != 1 & !is.na(b_covidsatisf) ~ "No", 
                                  is.na(b_covidsatisf) ~ NA_character_), 
          not_at_all_worthwhile = case_when(b_covidworth == 1   ~ "Yes", 
                                  b_covidworth != 1 & !is.na(b_covidworth) ~ "No", 
                                  is.na(b_covidworth) ~ NA_character_)
         )


data$felt_worried <- factor(data$felt_worried, levels = c("No","Yes" ))
data$felt_anger <- factor(data$felt_anger, levels = c("No","Yes" ))
data$felt_loneliness <- factor(data$felt_loneliness, levels = c("No","Yes" ))
data$not_felt_happiness <- factor(data$not_felt_happiness, levels = c("No","Yes" ))
data$not_at_all_satisfied_w_life <- factor(data$not_at_all_satisfied_w_life, levels = c("No","Yes" ))
data$not_at_all_worthwhile <- factor(data$not_at_all_worthwhile, levels = c("No","Yes" ))

p1 <- data %>% filter(!is.na(foc19_w2), !is.na(felt_worried)) %>% 
  group_by(foc19_w2, felt_worried) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = felt_worried)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Felt worried?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

p2 <- data %>% filter(!is.na(foc19_w2), !is.na(felt_anger)) %>% 
  group_by(foc19_w2, felt_anger) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = felt_anger)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Felt anger?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

p3 <- data %>% filter(!is.na(foc19_w2), !is.na(felt_loneliness)) %>% 
  group_by(foc19_w2, felt_loneliness) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = felt_loneliness)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Felt loneliness?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

p4 <- data %>% filter(!is.na(foc19_w2), !is.na(not_felt_happiness)) %>% 
  group_by(foc19_w2, not_felt_happiness) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = not_felt_happiness)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Not felt happiness?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

p5 <- data %>% filter(!is.na(foc19_w2), !is.na(not_at_all_satisfied_w_life)) %>% 
  group_by(foc19_w2, not_at_all_satisfied_w_life) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = not_at_all_satisfied_w_life)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Not at all satisfied\n with life?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

p6 <- data %>% filter(!is.na(foc19_w2), !is.na(not_at_all_worthwhile)) %>% 
  group_by(foc19_w2, not_at_all_worthwhile) %>% 
  summarise(n = sum(weight, na.rm = TRUE)) %>% 
  mutate(perc = n/sum(n)) %>% 
  ggplot(., aes(x = foc19_w2, y = perc, fill = not_at_all_worthwhile)) + 
  geom_bar(stat = "identity", position = "stack", col = "black") + 
  theme_minimal() + 
  scale_fill_manual(values=c("#FFFFFF", "#000000"), name = "Life is not at all \nworthwhile?") + 
  scale_y_continuous(labels = scales::percent) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  xlab("") + 
  ylab("Percent") + 
  labs(title = "")

grid.arrange(p1, p2, p3, p4, p5, p6, nrow = 2)


```



```{r emotionscore}

data <- data %>%  
  mutate(worry_n = case_when(b_covidemotion_1 == 11 ~ 1,
                             b_covidemotion_1 == 12 ~ 2,
                             b_covidemotion_1 == 13 ~ 3,
                             b_covidemotion_1 == 14 ~ 4,
                             b_covidemotion_1 == 15 ~ 5,
                             TRUE ~ NA_real_), 
         anger_n = case_when(b_covidemotion_2 == 11 ~ 1,
                             b_covidemotion_2 == 12 ~ 2,
                             b_covidemotion_2 == 13 ~ 3,
                             b_covidemotion_2 == 14 ~ 4,
                             b_covidemotion_2 == 15 ~ 5,
                             TRUE ~ NA_real_), 
         lonely_n = case_when(b_covidemotion_3 == 11 ~ 1,
                             b_covidemotion_3 == 12 ~ 2,
                             b_covidemotion_3 == 13 ~ 3,
                             b_covidemotion_3 == 14 ~ 4,
                             b_covidemotion_3 == 15 ~ 5,
                             TRUE ~ NA_real_), 
         happy_n = case_when(b_covidemotion_4 == 11 ~ 5,
                             b_covidemotion_4 == 12 ~ 4,
                             b_covidemotion_4 == 13 ~ 3,
                             b_covidemotion_4 == 14 ~ 2,
                             b_covidemotion_4 == 15 ~ 1,
                             TRUE ~ NA_real_), 
         satisf_reverse = case_when(b_covidsatisf == 1 ~ 5,
                                    b_covidsatisf == 2 ~ 4,
                                    b_covidsatisf == 3 ~ 3,
                                    b_covidsatisf == 4 ~ 2,
                                    b_covidsatisf == 5 ~ 1,
                                    TRUE ~ NA_real_),
         worth_reverse = case_when(b_covidworth == 1 ~ 5,
                                   b_covidworth == 2 ~ 4,
                                   b_covidworth == 3 ~ 3,
                                   b_covidworth == 4 ~ 2,
                                   b_covidworth == 5 ~ 1,
                                   TRUE ~ NA_real_) ) %>% 
  rowwise() %>% 
  mutate(allemosum = sum(worry_n, anger_n,  lonely_n,  happy_n, satisf_reverse, worth_reverse, na.rm = TRUE), 
         allemosum = ifelse(allemosum < 1, NA, allemosum))

m1 <- glm.nb(allemosum ~ foc19_w2, data = data, weight = weight)
m2 <- glm.nb(allemosum ~ foc19_w2 + a_cov + covaff_w2 + age + gender + race_coded + a_covidjob + cities, data = data, weight = weight)

         
stargazer(m1, m2, type="text", p.auto=FALSE, apply.coef = exp, ci = FALSE)

```


### Note: try poisson

No difference in outcome, pretty similar AIC scores too:

```{r emomodepoisson}

m1 <- glm(allemosum ~ foc19_w2, data = data, weight = weight, family = "poisson")
m2 <- glm(allemosum ~ foc19_w2 + a_cov + covaff_w2 + age + gender + race_coded + a_covidjob + cities, data = data, weight = weight, family = "poisson")


stargazer(m1, m2, type="text", p.auto=FALSE, apply.coef = exp, ci = FALSE)


```

## Move between groups

```{r funcworrychanges}

data <- data %>% mutate(
  whochangedff = case_when(foc19_w2 == "Unworried" & foc19_w3 == "Unworried" ~ "Stayed Unworried",
                           foc19_w2 == "Functional Worry" & foc19_w3 == "Functional Worry" ~ "Stayed Functional Worry",
                           foc19_w2 == "Dysfunctional Worry" & foc19_w3 == "Dysfunctional Worry" ~ "Stayed Dysfunctional Worry",
                           foc19_w2 == "Unworried" & foc19_w3 == "Functional Worry" ~ "Unworried to Functional Worry",
                           foc19_w2 == "Unworried" & foc19_w3 == "Dysfunctional Worry" ~ "Unworried to Dysfunctional Worry", 
                           foc19_w2 == "Functional Worry" & foc19_w3 == "Unworried" ~ "Functional Worry to Unworried",
                           foc19_w2 == "Functional Worry" & foc19_w3 == "Dysfunctional Worry" ~ "Functional Worry to Dysfunctional Worry",
                           foc19_w2 == "Dysfunctional Worry" & foc19_w3 == "Unworried" ~ "Dysfunctional Worry to Unworried",
                           foc19_w2 == "Dysfunctional Worry" & foc19_w3 == "Functional Worry" ~ "Dysfunctional Worry to Functional Worry"), 
  stayedsame = case_when(
    grepl("Stayed", whochangedff) ~"stayed", 
    grepl(" to ", whochangedff)~"changed",
    TRUE ~ NA_character_))


change_tab <- data %>% 
  filter(!is.na(stayedsame)) %>% 
  group_by(stayedsame) %>% 
  summarise(n = sum(weight, na.rm = T)) %>% 
  mutate(perc = round(n/sum(n,na.rm = TRUE)*100,0)) 
```


While most people have stayed in the same group between the two waves (`r change_tab %>% filter(stayedsame == "stayed") %>% pull(perc)`%), almost a third (`r change_tab %>% filter(stayedsame == "changed") %>% pull(perc)`%) moved between categories
(Figure 2). 


```{r sankey}

sankey_df <- as.data.frame(data %>% filter(!is.na(foc19_w3) & !is.na(foc19_w2))%>% group_by(foc19_w2, foc19_w3) %>% count())
# "source" = foc19_w2, "target" = foc19_w3, "value" = n

sankey_df$foc19_w3 <- paste(sankey_df$foc19_w3, " ", sep="")

# Create nodes df
nodes <- data.frame(name=c(as.character(sankey_df$foc19_w2), as.character(sankey_df$foc19_w3)) %>% unique())

# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
sankey_df$IDsource=match(sankey_df$foc19_w2, nodes$name)-1 
sankey_df$IDtarget=match(sankey_df$foc19_w3, nodes$name)-1


# Make the Network
sankeyNetwork(Links = sankey_df, Nodes = nodes,
              Source = "IDsource", Target = "IDtarget",
              Value = "n", NodeID = "name")

```


```{r riskresultsfig2}

data <- data %>% mutate(c_riskcn = case_when(c_riskc == 6 ~ 3,
                                             c_riskc == 7 ~ 4,
                                             c_riskc == 8 ~ 5, 
                                             TRUE ~ as.numeric(c_riskc)),
                        c_riskln = case_when(c_riskl == 6 ~ 3,
                                             c_riskl == 7 ~ 4,
                                             c_riskl == 8 ~ 5, 
                                             TRUE ~ as.numeric(c_riskl)), 
                        c_risksn = case_when(c_risks == 6 ~ 3,
                                             c_risks == 7 ~ 4,
                                             c_risks == 8 ~ 5, 
                                             TRUE ~ as.numeric(c_risks)))

lhood <- ggplot(data %>% filter(!is.na(foc19_w3)), aes(x = foc19_w3, y = c_riskln, group = foc19_w3)) + 
  geom_boxplot() + 
  theme_minimal() +
  xlab("") + 
  ylab("Score (higher = more perceived likelihood)") + 
  labs(title = "Likelihood") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

severity <- ggplot(data %>% filter(!is.na(foc19_w3)), aes(x = foc19_w3, y = c_risksn, group = foc19_w3)) + 
  geom_boxplot() + 
  theme_minimal() +
  xlab("") + 
  ylab("Score (higher = more severe consequences)") + 
  labs(title = "Consequences") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

ctrl <-  ggplot(data %>% filter(!is.na(foc19_w3)), aes(x = foc19_w3, y = c_riskcn, group = foc19_w3)) + 
  geom_boxplot() + 
  theme_minimal()  +
  xlab("") + 
  ylab("Score (higher = more perceived control)") + 
  labs(title = "Control") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

grid.arrange(lhood, severity, ctrl, nrow = 1)


```


Unworried group have lower perceived likelihood and severity of consequences and higher perceived control, the Coping group are in the middle, and the Struggling group have the highest perceived likelihood and perceive most severe consequences! 


```{r risktable3}

# Run the model

data$foc19_w3 <- relevel(data$foc19_w3, ref = "Dysfunctional Worry")
model1 <- multinom(foc19_w3 ~ c_riskln + c_riskcn + c_risksn, data=data)
model2 <- multinom(foc19_w3 ~ c_riskln + c_riskcn + c_risksn + a_cov + covaff_w2 + age + gender + race_coded + a_covidjob + cities, data=data)

stargazer(model1, model2, type="text", p.auto=FALSE, apply.coef = exp, ci = FALSE)


```


So one thing could be to target these perceptions with comms etc to help people out of 'struggling' group. 

